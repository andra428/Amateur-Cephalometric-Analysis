# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\facultate\Anul III\Sem I\PIM-P\try cod\try2\selectPacient.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3 as sl
import cv2 as cv
from math import sqrt
import pathlib
import sqlite3 as sl
import cv2 as cv
import pathlib


from helper import Ui_Dialog
from math import sqrt
import numpy as np
import math
from math import atan2, pi
from PyQt5 import QtCore, QtGui, QtWidgets

class Points:
    def __init__(self,x,y):
        self.x=x
        self.y=y

    def show(self):
        print(str(self.x), ' ',str(self.y))

    def show_distance(self):
        print("Distance in mm " + str(self.mm_distance))

    def isEmpty(self):
        if self.x == 0 and self.y == 0:
            return True
        else:
            return False

    def print(self):
        print(str(self.x) + ' ' + str(self.y))

    def set(self, x, y):
        self.x = x
        self.y = y

class Ui_SelectWindow(object):
    k = 0
    distances = []

    sna = []
    snb = []
    anb = []
    contor_puncte = 0
    angles = []


    def openHelper(self):  # aici vreau sa fac un dialog box care sa spuna ce punct sa introduca; si mereu updatam textul din linedit
        self.window = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()
        self.ui.lineEdit.setText('N')

    def updateHelper(self):

        if self.contor_puncte == 0:
            self.ui.lineEdit.setText('S')
        if self.contor_puncte == 1:
            self.ui.lineEdit.setText('A')
        if self.contor_puncte == 2:
            self.ui.lineEdit.setText('B')
        if self.contor_puncte == 3:
            self.ui.lineEdit.setText('Pn')
        if self.contor_puncte == 4:
            self.ui.lineEdit.setText('Pog')
        if self.contor_puncte == 5:
            self.ui.lineEdit.setText('LS')
        if self.contor_puncte == 6:
            self.ui.lineEdit.setText('LI')
        if self.contor_puncte == 7:
            self.ui.lineEdit.setText('LS2')
        if self.contor_puncte == 8:
            self.ui.lineEdit.setText('LI2')
        if self.contor_puncte == 9:
            self.ui.lineEdit.setText('Ready')
            self.ui.pushButton.show()




    def findAngle(self,a):

        x1, y1 = np.array(a[0])  # origin
        x2, y2 = np.array(a[1])
        x3, y3 = np.array(a[2])

        radian = np.arctan2(y3 - y1, x3 - x1) - np.arctan2(y2 - y1, x2 - x1)
        angle = np.abs(radian * 180 / np.pi)
        angle = round(angle, 3)
        if angle > 180.0:
            angle = 360 - angle

        print("angle: ")
        print(angle)
        '''
        sql = 'INSERT INTO Unghiuri (SNA,SNB,ANB) values( ?,?,?)'
        data = [
            (angle, angle, angle)
        ]
        with con:
            con.executemany(sql, data)
        '''
        return angle

    def home(self, main_w, pacient_w):
        main_w.show()
        pacient_w.close()
    def angles(self):
        if (len(self.sna) == 3):
            result = math.degrees(math.atan2(self.sna[2].y - self.sna[1].y, self.sna[2].x - self.sna[1].x) - math.atan2(
                self.sna[0].y - self.sna[1].y, self.sna[2].x - self.sna[1].x))
            print("unghi: " + str(result))

    def distance(self, P1, P2):
        con=sl.connect('distante.db')
        pixel_distance = sqrt((P1.x - P2.x) ** 2 + (P1.y - P2.y) ** 2)
        # print("Pixel distance " + str(pixel_distance))
        mm_distance = 0.2645833333 * pixel_distance
        print("Distance in mm " + str(mm_distance))
        self.distances.append(mm_distance)
        print(len(self.distances))
        if(len(self.distances)==3):
            sql = 'INSERT INTO Distante ( isNA,PLS,PLI) values( ?, ?,?)'
            data = [
                (self.distances[0],self.distances[1],self.distances[2])
            ]
            with con:
                con.executemany(sql, data)

    def click_event(self, event, x, y, flags, params):
        con = sl.connect('unghiuri.db')
        # checking for left mouse clicks
        if event == cv.EVENT_LBUTTONDOWN:

            self.updateHelper()
            if (len(self.sna) != 3):  # MAI INTAI N APOI S APOI A
                self.sna.append([x, y])
                if self.contor_puncte == 0:
                    self.n = [x, y]
                elif self.contor_puncte == 1:
                    self.s = [x, y]

            if len(self.sna) == 3:
                print("SNA")
                snaa=self.findAngle(self.sna)
            if len(self.snb) == 0 and self.contor_puncte == 2:
                self.snb.append(self.n)
                self.snb.append(self.s)
            if len(self.snb) == 2 and self.contor_puncte == 3:
                self.snb.append([x, y])
            if (len(self.snb) == 3):
                print("SNB")
                snbb=self.findAngle(self.snb)
            # IN SNA AVEM IN ORDINEA N S A
            # IN SNB AVEM IN ORDINEA N S B
            if len(self.sna) == 3 and len(self.snb) == 3 and self.contor_puncte == 3:
                self.anb.append(self.sna[0])
                self.anb.append(self.sna[2])
                self.anb.append(self.snb[2])
                # NA
                self.distance(Points(self.sna[0][0], self.sna[0][1]), Points(self.sna[2][0], self.sna[2][1]))

            if (self.contor_puncte == 4):
                self.Pn = Points(x, y)
                print("Pn: " + str(self.Pn.x) + "," + str(self.Pn.y))

            if (self.contor_puncte == 5):
                self.Pog = Points(x, y)
                print("Pog: " + str(self.Pog.x) + "," + str(self.Pog.y))
                cv.line(self.img, (self.Pn.x, self.Pn.y), (self.Pog.x, self.Pog.y), (255, 232, 151), 2)
                # print("distanta Pn-Ls")
                # self.distance(self.Pn, self.Ls)

            if (self.contor_puncte == 6):
                self.Ls = Points(x, y)
                print("Ls: " + str(self.Ls.x) + "," + str(self.Ls.y))
                # print("distanta Pn-Li")
                # self.distance(self.Pn, self.Li)

            if (self.contor_puncte == 7):
                self.Li = Points(x, y)
                print("Li: " + str(self.Li.x) + "," + str(self.Li.y))

            if (self.contor_puncte == 8):
                self.Ls2 = Points(x, y)
                print("Buza sup linie")
                cv.arrowedLine(self.img, (self.Ls.x, self.Ls.y), (self.Ls2.x, self.Ls2.y), (255, 232, 151), 2)
                self.distance(self.Ls2, self.Ls)

            if (self.contor_puncte == 9):
                self.Li2 = Points(x, y)
                print("Buza inf linie")
                cv.arrowedLine(self.img, (self.Li.x, self.Li.y), (self.Li2.x, self.Li2.y), (255, 232, 151), 2)
                self.distance(self.Li2, self.Li)

            if len(self.anb) == 3:
                print("ANB")
                anbb=self.findAngle(self.anb)
            # print(self.sna)
            # print(self.snb)
            # print(self.anb)

            # displaying the coordinates
            # on the image window
            font = cv.FONT_HERSHEY_SIMPLEX
            # self.prevImage = self.img.copy()
            if self.contor_puncte == 0:
                cv.putText(self.img, "N", (x + 4, y), font, 1, (255, 232, 151), 2, cv.LINE_AA)
            elif self.contor_puncte == 1:
                cv.putText(self.img, "S", (x + 4, y), font, 1, (255, 232, 151), 2, cv.LINE_AA)
            elif self.contor_puncte == 2:
                cv.putText(self.img, "A", (x + 4, y), font, 1, (255, 232, 151), 2, cv.LINE_AA)
            elif self.contor_puncte == 3:
                cv.putText(self.img, "B", (x + 4, y), font, 1, (255, 232, 151), 2, cv.LINE_AA)
            elif self.contor_puncte == 4:
                cv.putText(self.img, "Pn", (x + 4, y), font, 1, (255, 232, 151), 2, cv.LINE_AA)
            elif self.contor_puncte == 5:
                cv.putText(self.img, "Pog", (x + 4, y), font, 1, (255, 232, 151), 2, cv.LINE_AA)
            elif self.contor_puncte == 6:
                cv.putText(self.img, "Ls", (x + 4, y), font, 1, (255, 232, 151), 2, cv.LINE_AA)
            elif self.contor_puncte == 7:
                cv.putText(self.img, "Li", (x + 4, y), font, 1, (255, 232, 151), 2, cv.LINE_AA)
                sql = 'INSERT INTO Unghiuri (SNA,SNB,ANB) values( ?,?,?)'
                data = [
                    (snaa, snbb, anbb)
                ]
                with con:
                    con.executemany(sql, data)


            self.img = cv.circle(self.img, (x, y), radius=0, color=(0, 0, 255), thickness=10)
            cv.imshow('image', self.img)

            self.contor_puncte = self.contor_puncte + 1

        # if event == cv.EVENT_RBUTTONDOWN:
        # self.img = self.prevImage.copy()
        # cv.imshow('image', self.img)

    def analyze(self):

        self.contor_puncte = 0;
        name = self.comboBox.currentText()
        print(str(name))
        con = sl.connect('DataBase.db')
        con2 = sl.connect('unghiuri.db')
        con3=sl.connect('distante.db')
        cursor2= con2.cursor()
        cursor2.execute("DELETE FROM Unghiuri")
        con2.commit()
        cursor3=con3.cursor()
        cursor3.execute("DELETE FROM Distante")
        con3.commit()
        cursor = con.cursor()
        cursor.execute("SELECT Path  FROM Pacient WHERE LastName=?", (name,))
        results = cursor.fetchall()
        for r in results:
            print(r[0])
        cursor.close()
        con.close()

        self.img = cv.imread(r[0],1)
        self.img = cv.resize(self.img,(1000,900))
        #self.prevImage = cv.imread(r[0],1)
        #self.prevImage = cv.resize(self.prevImage, (1000, 900))
        cv.imshow('image',self.img)
        cv.setMouseCallback('image',self.click_event)
        self.openHelper()



    def setupUi(self, SelectWindow,MainWindow):
        SelectWindow.setObjectName("MainWindow")
        #SelectWindow.resize(800, 600)
        SelectWindow.setFixedWidth(800)
        SelectWindow.setFixedHeight(600)

        SelectWindow.setStyleSheet("background-color: rgb(151, 232, 255);")
        self.centralwidget = QtWidgets.QWidget(SelectWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(130, 220, 511, 81))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("QComboBox{\n"
"    background: pink;\n"
"    border: 2px solid rgb(151, 232, 255);\n"
"    border-radius: 20px;\n"
"    color: black;\n"
"    \n"
"    selection-color:pink;\n"
"\n"
"}\n"
"\n"
"QComboBox:hover{\n"
"    background-color:rgb(206, 164, 196);\n"
"    border: 2px solid rgb(206, 164, 196);\n"
"}\n"
"\n"
"QComboBox QAbstractItemView{\n"
"    background-color: pink;\n"
"    color:black;\n"
" \n"
"    selection-background-color: rgb(206, 164, 196);\n"
"    selection-color: black;\n"
"}")
        self.comboBox.setObjectName("comboBox")
        #self.comboBox.addItem("")
        #self.comboBox.addItem("")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 70, 251, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(290, 400, 191, 91))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton{\n"
"    background: pink;\n"
"    border: 2px solid rgb(151, 232, 255);\n"
"    border-radius: 20px;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color:rgb(206, 164, 196);\n"
"    border: 2px solid rgb(206, 164, 196);\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.analyze)
        SelectWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(SelectWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        SelectWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(SelectWindow)
        self.statusbar.setObjectName("statusbar")
        SelectWindow.setStatusBar(self.statusbar)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(0, 0, 31, 28))
        self.pushButton_2.setStyleSheet("QPushButton{\n"
                                        "    background:rgb(151, 232, 255);\n"
                                        "    border: 2px solid rgb(151, 232, 255);\n"
                                        "    border-radius: 0px;\n"
                                        "    color: black;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover{\n"
                                        "    background-color:rgb(206, 164, 196);\n"
                                        "    border: 2px solid rgb(206, 164, 196);\n"
                                        "}")
        self.pushButton_2.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("resources\\home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon)
        self.pushButton_2.setObjectName("pushButton_4")
        self.pushButton_2.clicked.connect(lambda: self.home(MainWindow,SelectWindow))
        SelectWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(SelectWindow)
        QtCore.QMetaObject.connectSlotsByName(SelectWindow)
        con = sl.connect('DataBase.db')

        cursor2 = con.cursor()

        cursor2.execute("SELECT LastName  FROM Pacient")

        results2 = cursor2.fetchall()

        for r in results2:
            self.comboBox.addItem(r[0])

    def retranslateUi(self, SelectWindow):
        _translate = QtCore.QCoreApplication.translate
        SelectWindow.setWindowTitle(_translate("MainWindow", "WolfCoat"))
        #self.comboBox.setItemText(0, _translate("MainWindow", "Martin"))
        #self.comboBox.setItemText(1, _translate("MainWindow", "Cojocaruu"))
        self.label.setText(_translate("MainWindow", "Select Pacient"))
        self.pushButton.setText(_translate("MainWindow", "Analyze"))